resources:

- repo: self
  clean: true

variables:
  SamplesBin: SamplesBin
  WINDOWS_WINMD: C:\Program Files (x86)\Windows Kits\10\UnionMetadata\10.0.18362.0\Windows.winmd
  WindowsTargetPlatformVersion: 10.0.18362.0

strategy:
  maxParallel: 8
  matrix:
    Release_x64:
      BuildPlatform: x64
      BuildConfiguration: Release
    Debug_x64:
      BuildPlatform: x64
      BuildConfiguration: Debug
    Release_x86:
      BuildPlatform: x86
      BuildConfiguration: Release
    Debug_x86:
      BuildPlatform: x86
      BuildConfiguration: Debug

pool:
  name: DirectML_BuildPool
#  demands: agent.osversion -equals 10.0.17763

# CI trigger
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - Tools

# PR validation trigger
pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - Tools

steps: 
  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet 5.11.0'
    inputs:
      versionSpec: '5.11.0'

  - task: PowerShell@2
    displayName: 'Install the win 10 SDK v10.0.18362.0'
    inputs:
      targetType: 'inline'
      script: |
        choco install windows-sdk-10-version-1903-all -y

  # - task: PowerShell@2
  #   displayName: "Build WinMLSamplesGallery"
  #   inputs:
  #     targetType: 'inline'
  #     script: 'C:\"Program Files (x86)"\"Microsoft Visual Studio"\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe "D:\a\_work\1\s\Samples\WinMLSamplesGallery\WinMLSamplesGallery.sln" /nologo /nr:false /p:_MSDeployUserAgent="VSTS_cb55739e-4afe-46a3-970f-1b49d8ee7564_build_39302_0" /p:Configuration=Debug /p:Platform=x64 /p:ReadOnly=false /t:Restore,Clean,Build'

  - task: VSBuild@1
    displayName: 'Build WinMLSamplesGallery'
    inputs:
      solution: 'Samples/WinMLSamplesGallery/WinMLSamplesGallery.sln'
      vsVersion: "16.0"
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\WinMLSamplesGallery\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion) /t:Restore,Clean,Build'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()


  # - task: VSBuild@1
  #   displayName: 'Build UI test solution Testing/**/SamplesTest.sln'
  #   inputs:
  #     solution: 'Testing/**/SamplesTest.sln'
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\SamplesTest\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build AdapterSelection Sample'
  #   inputs:
  #     solution: Samples/AdapterSelection/AdapterSelection.sln
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\AdapterSelection\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build CustomOperator Sample'
  #   inputs:
  #     solution: Samples/CustomOperator/desktop/cpp/custom-operator-sample.sln
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\CustomOperator\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build MNIST-Tutorial-cs Sample'
  #   inputs:
  #     solution: 'Samples/MNIST/Tutorial/cs/mnist_demo.sln'
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-Tutorial\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build MNIST-UWP-cs Sample'
  #   inputs:
  #     solution: 'Samples/MNIST/UWP/cs/mnist_demo.sln'
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-cs\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build SqueezenetObjectDetection Sample'
  #   inputs:
  #     solution: Samples/SqueezeNetObjectDetection/squeezenetobjectdetection.sln
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\SqueezeNetObjectDetection\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'	
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build FNSCandyStyleTransfer-UWP-CS Sample'
  #   inputs:
  #     solution: Samples/FNSCandyStyleTransfer/UWP/CS/snapcandy.sln
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag  /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\FNSCandyStyleTransfer\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build MNIST-UWP-cppcx Sample'
  #   inputs:
  #     solution: 'Samples/MNIST/UWP/cppcx/mnist_cppcx.sln'
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-cppcx\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build CustomTensorization Sample'
  #   inputs:
  #     solution: Samples/CustomTensorization/CustomTensorization.sln
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\CustomTensorization\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build BatchSupport Sample'
  #   inputs:
  #     solution: Samples/BatchSupport/BatchSupport.sln
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\BatchSupport\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build Emoji Sample'
  #   inputs:
  #     solution: Samples/Emoji8/UWP/cs/Emoji8.sln
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\Emoji8\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build StreamFromResource Sample'
  #   inputs:
  #     solution: Samples/StreamFromResource/StreamFromResource.sln
  #     vsVersion: 15.0
  #     msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\StreamFromResource\ /p:WindowsTargetPlatformVersion=$(WindowsTargetPlatformVersion)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #     msbuildArchitecture: x64
  #     createLogFile: true
  #   condition: succeededOrFailed()

  # - task: VSBuild@1
  #   displayName: 'Build WinML Samples Gallery'
  #   inputs:
  #     solution: Samples/WinMLSamplesGallery/WinMLSamplesGallery.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     clean: true
  #   condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)\$(BuildConfiguration)\'
      sourceFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\'
      Contents: |
        **\SamplesTest\**
        **\AppPackages\**
    condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)\$(BuildConfiguration)\'
      sourceFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\'
      Contents: |
        ?(AdapterSelection|CustomOperator|CustomTensorization)**\*
        SqueezeNetObjectDetection\*
    condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)\$(BuildConfiguration)\SharedContent'
      sourceFolder: 'SharedContent'
      contents: '**\*'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Samples'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: WinMLPublicSamples
    condition: succeededOrFailed()
